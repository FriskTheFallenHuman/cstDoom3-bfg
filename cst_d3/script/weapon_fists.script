/***********************************************************************

weapon_fists.script

***********************************************************************/

// blend times
#define FISTS_IDLE_TO_LOWER		4
#define FISTS_IDLE_TO_PUNCH		0
#define FISTS_RAISE_TO_IDLE		4
#define FISTS_PUNCH_TO_IDLE		1

object weapon_fists : weapon_base {
	//#modified-fva; BEGIN
	float		cstNetfired;
	//#modified-fva; END
	float		side;

	void		init();
	
	void		Lower();
	void		Raise();
	void		Idle();
	void		Fire();
	void		ExitCinematic();
	string		GetFireAnim();
};

void weapon_fists::init() {
	//#modified-fva; BEGIN
	cstNetfired = false;
	//#modified-fva; END
	weaponState( "Raise", 0 );
}

void weapon_fists::Raise() {
	weaponRising();
	playAnim( ANIMCHANNEL_ALL, "raise" );
	waitUntil( animDone( ANIMCHANNEL_ALL, FISTS_RAISE_TO_IDLE ) );
	weaponState( "Idle", FISTS_RAISE_TO_IDLE );
}

void weapon_fists::Lower() {
	weaponLowering();
	playAnim( ANIMCHANNEL_ALL, "putaway" );
	waitUntil( animDone( ANIMCHANNEL_ALL, 0 ) );
	weaponHolstered();
	waitUntil( WEAPON_RAISEWEAPON );
	weaponState( "Raise", 0 );
}

void weapon_fists::Idle() {
	weaponReady();
	playCycle( ANIMCHANNEL_ALL, "idle" );
	while( 1 ) {
		if ( WEAPON_LOWERWEAPON ) {
			weaponState( "Lower", FISTS_IDLE_TO_LOWER );
		}
		if ( WEAPON_ATTACK || WEAPON_NETFIRING ) {
			//#modified-fva; BEGIN
			cstNetfired = WEAPON_NETFIRING;
			cstSetNetfiring(true);
			//#modified-fva; END
			weaponState( "Fire", FISTS_IDLE_TO_PUNCH );
		}
		waitFrame();
	}
}

void weapon_fists::Fire() {
	//#modified-fva; BEGIN
	/*
	playAnim( ANIMCHANNEL_ALL, GetFireAnim() );
	sys.wait( 0.1 );
	melee();
	waitUntil( animDone( ANIMCHANNEL_ALL, FISTS_PUNCH_TO_IDLE ) );
	side = !side;
	weaponState( "Idle", FISTS_PUNCH_TO_IDLE );
	*/

	if (!sys.isMultiplayer()) {
		do {
			playAnim( ANIMCHANNEL_ALL, GetFireAnim() );
			sys.wait( 0.1 );
			melee();
			waitUntil( animDone( ANIMCHANNEL_ALL, FISTS_PUNCH_TO_IDLE ) );
			side = !side;
		} while ( WEAPON_ATTACK || WEAPON_NETFIRING );
	} else {
		float cstBreak = false;
		do {
			playAnim( ANIMCHANNEL_ALL, GetFireAnim() );
			sys.wait( 0.1 );
			melee();

			waitUntil( animDone( ANIMCHANNEL_ALL, FISTS_PUNCH_TO_IDLE + 5 ) );
			if ( !cstNetfired && (!WEAPON_ATTACK || WEAPON_LOWERWEAPON) ) {
				cstBreak = true;
				cstSetNetfiring(false);
			}

			waitUntil( animDone( ANIMCHANNEL_ALL, FISTS_PUNCH_TO_IDLE ) );
			side = !side;
		} while ( (!cstNetfired && !cstBreak) || (cstNetfired && WEAPON_NETFIRING) );
	}
	weaponState( "Idle", FISTS_PUNCH_TO_IDLE );
	//#modified-fva; END
}

void weapon_fists::ExitCinematic() {
	//#modified-fva; BEGIN
	cstNetfired = false;
	//#modified-fva; END
	weaponState( "Idle", 0 );
}

string weapon_fists::GetFireAnim() {
	if ( side ) {
		return "punch_left";
	} else {
		return "punch_right";
	}
}
